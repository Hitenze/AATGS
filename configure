USING_OPENMP=0
USING_OPENBLAS=0
USING_MKL=0
USING_ICX=0
USING_F32=0

AATGS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
FLAGS="-DUNIX -O0 -Wall -Wno-unused-function -Wno-unused-variable -fPIC -std=gnu11 -march=native -g"
FLAGSCPP="-DUNIX -O0 -Wall -Wno-unused-function -Wno-unused-variable -fPIC -std=c++14 -march=native -g"

extract_value() {
	echo "$1" | cut -d '=' -f 2
}

for arg in "$@"
do
	case $arg in
		--with-openblas) USING_OPENBLAS=1 ;;
		--with-mkl) USING_MKL=1 ;;
      --with-icx) USING_ICX=1 ;;
		--with-openmp) USING_OPENMP=1 ;;
		--with-f32) USING_F32=1 ;;
		CC=*) CC=$(extract_value $arg) ;;
		CXX=*) CXX=$(extract_value $arg) ;;
		FC=*) FC=$(extract_value $arg) ;;
		OPENBLAS_PATH=*) OPENBLAS_PATH=$(extract_value $arg) ;;
		*) ;;
	esac
	shift
done

# Check if MKL is available
if [ "$USING_MKL" -eq 1 ]; then
   if [ "$USING_ICX" -eq 1 ]; then
      if [ ! -z "$(which icx)" ] && [ ! -z "$(which icpx)" ] && [ ! -z "$(which ifx)" ]; then
         if [ ! -z "$MKLROOT" ]; then
            echo "MKL detected at $MKLROOT, enable MKL."
            USING_MKL=1
            USING_OPENBLAS=0
            USING_OPENMP=1
         else
            echo "MKLROOT: not found. please set MKLROOT environment variable."
            exit 1
         fi
      else
         echo "MKL compiler: not found, please check icx, icpx and ifx are in your PATH."
         exit 1
      fi
   else
      if [ ! -z "$(which icc)" ] && [ ! -z "$(which icpc)" ] && [ ! -z "$(which ifort)" ]; then
         if [ ! -z "$MKLROOT" ]; then
            echo "MKL detected at $MKLROOT, enable MKL."
            USING_MKL=1
            USING_OPENBLAS=0
            USING_OPENMP=1
         else
            echo "MKLROOT: not found. please set MKLROOT environment variable."
            exit 1
         fi
      else
         echo "MKL compiler: not found, please check icc, icpc and ifort are in your PATH."
         exit 1
      fi
   fi
else
   USING_MKL=0
fi

# Only check OpenBLAS when MKL is not available
if [ "$USING_MKL" -eq 0 ] && [ "$USING_OPENBLAS" -eq 1 ]; then
	OPENBLAS_PATH=${OPENBLAS_PATH:-$(find "/opt/OpenBLAS" "$AATGS_DIR/../OpenBLAS" "$AATGS_DIR/../OpenBLAS-git" -maxdepth 1 -type d \( -name "build" -o -name "install" \) -print -quit 2>/dev/null)}
	if [ ! -z "$OPENBLAS_PATH" ] && [ -d "$OPENBLAS_PATH" ] && [ -d "$OPENBLAS_PATH/include" ] && [ -d "$OPENBLAS_PATH/lib" ]; then
		echo "OpenBLAS detected at $OPENBLAS_PATH, enable OpenBLAS."
		USING_MKL=0
		USING_OPENBLAS=1
		USING_OPENMP=1
	else
      echo "OpenBLAS: not found. please set OPENBLAS_PATH environment variable (to the build directory cotaining include and lib)."
      exit 1
   fi
else
   USING_OPENBLAS=0
fi

# if using MKL, set USING_OPENBLAS to 0 and USING_OPENMP to 1
if [ "$USING_MKL" -eq 1 ]; then
	USING_OPENBLAS=0
	USING_OPENMP=1
fi

# if using OpenBLAS, set USING_OPENMP to 1
if [ "$USING_OPENBLAS" -eq 1 ]; then
	USING_OPENMP=1
fi

if [ "$USING_MKL" -eq 1 ]; then
   	if [ "$USING_ICX" -eq 1 ]; then
      	CC=${CC:-$(which icx)}
      	CXX=${CXX:-$(which icpx)}
      	FC=${FC:-$(which ifx)}
   	else
      	CC=${CC:-$(which icc)}
      	CXX=${CXX:-$(which icpc)}
      	FC=${FC:-$(which ifort)}
   	fi
else
	HCC=$(find /opt/homebrew/Cellar/gcc -type f -name 'gcc-*' -print -quit 2>/dev/null)
	HXX=$(find /opt/homebrew/Cellar/gcc -type f -name 'g++-*' -print -quit 2>/dev/null)
	if [ ! -z "$HCC" ] && [ ! -z "$HXX" ]; then
		CC="$HCC"
		CXX="$HXX"
	else
		CC=${CC:-$(which gcc || which cc || which clang)}
		CXX=${CXX:-$(which g++ || which c++ || which clang++)}
	fi
fi
if [ -z "$CC" ]; then
	echo "C Compiler: not found, please set the CC environment variable."
	exit 1
fi
if [ -z "$CXX" ]; then
	echo "CXX Compiler: not found, please set the CXX environment variable."
	exit 1
fi
#if [ -z "$FC" ]; then
#	echo "Fortran Compiler: not found, please set the FC environment variable."
#	exit 1
#fi
echo "C Compiler: $CC"
echo "CXX Compiler: $CXX"
#echo "Fortran Compiler: $FC"

if [ "$USING_MKL" -eq 1 ]; then
	# check if MKLROOT is set
	if [ -z "$MKLROOT" ]; then
		echo "MKLROOT: not found. please set MKLROOT environment variable."
		exit 1
	fi
	echo "MKLROOT: $MKLROOT"
   FLAGS="$FLAGS -qopenmp -DAATGS_USING_MKL -DAATGS_USING_OPENMP"
   FLAGSCPP="$FLAGSCPP -qopenmp -DAATGS_USING_MKL -DAATGS_USING_OPENMP"
	INCLAPACKBLAS="-I$MKLROOT/include"
	LIBLAPACKBLAS="-L$MKLROOT/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl"
else
	if [ "$USING_OPENBLAS" -eq 1 ]; then
		OPENBLAS_PATH=${OPENBLAS_PATH:-$(find "/opt/OpenBLAS" "$AATGS_DIR/../OpenBLAS" "$AATGS_DIR/../OpenBLAS-git" -maxdepth 1 -type d \( -name "build" -o -name "install" \) -print -quit 2>/dev/null)}
		if [ -z "$OPENBLAS_PATH" ] || [ ! -d "$OPENBLAS_PATH" ] || [ ! -d "$OPENBLAS_PATH/include" ] || [ ! -d "$OPENBLAS_PATH/lib" ]; then
			echo "OpenBLAS: not found. please set OPENBLAS_PATH environment variable (to the build directory cotaining include and lib)."
			exit 1
		fi
		echo "OpenBLAS: $OPENBLAS_PATH"
		INCLAPACKBLAS="-I$OPENBLAS_PATH/include"
		LIBLAPACKBLAS="-L$OPENBLAS_PATH/lib -lopenblas"
	else
		# using system default LAPACK and BLAS
		echo "Using system default LAPACK and BLAS."
		INCLAPACKBLAS=""
		LIBLAPACKBLAS="-llapack -lblas"
	fi
	# update flag if using OpenMP
	if [ "$USING_OPENMP" -eq 1 ]; then
		FLAGS="$FLAGS -fopenmp -DAATGS_USING_OPENMP"
		FLAGSCPP="$FLAGSCPP -fopenmp -DAATGS_USING_OPENMP"
	fi
fi

if [ "$USING_F32" -eq 1 ]; then
	FLAGS="$FLAGS -DAATGS_USING_FLOAT32"
	FLAGSCPP="$FLAGSCPP -DAATGS_USING_FLOAT32"
fi

# Other settings
LINK="$CC"
LINKXX="$CXX"
AR="ar crv"
RANLIB="ranlib"

# Generate Makefile.in
cat > Makefile.in << EOF

USING_OPENMP = $USING_OPENMP
USING_OPENBLAS = $USING_OPENBLAS
USING_MKL = $USING_MKL

FLAGS := $FLAGS
FLAGSCPP := $FLAGSCPP

AATGS_PATH = ./build

INCLAPACKBLAS := $INCLAPACKBLAS
LIBLAPACKBLAS := $LIBLAPACKBLAS

CC := $CC
CXX := $CXX
#GFORTRAN := $FC
LINK := $LINK
LINKXX := $LINKXX
AR := $AR
RANLIB := $RANLIB

EOF

echo "Makefile.in generated."

# Generate environment.sh to add LD_LIBRARY_PATH and DYLD_LIBRARY_PATH for OpenBLAS and AATGS
cat > environment.sh << EOF
export LD_LIBRARY_PATH=$AATGS_DIR/build/lib/:\$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$AATGS_DIR/build/lib/:\$DYLD_LIBRARY_PATH
export LD_LIBRARY_PATH=$OPENBLAS_PATH/lib/:\$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$OPENBLAS_PATH/lib/:\$DYLD_LIBRARY_PATH
EOF

echo "environment.sh generated."
